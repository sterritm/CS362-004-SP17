        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      516:    8:int compare(const void* a, const void* b) {
      516:    9:  if (*(int*)a > *(int*)b)
       27:   10:    return 1;
      489:   11:  if (*(int*)a < *(int*)b)
      170:   12:    return -1;
      319:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        7:   77:  else if (numPlayers == 3)
        -:   78:    {
        3:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        7:   95:      state->supplyCount[estate] = 12;
        7:   96:      state->supplyCount[duchy] = 12;
        7:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       36:  115:		  if (numPlayers == 2){ 
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       14:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       38:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       29:  140:      state->deckCount[i] = 0;
      116:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       87:  143:	  state->deck[i][j] = estate;
       87:  144:	  state->deckCount[i]++;
        -:  145:	}
      232:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      203:  148:	  state->deck[i][j] = copper;
      203:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       38:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       29:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       38:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       29:  166:      state->handCount[i] = 0;
       29:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
      101:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      101:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      101:  209:  if (state->deckCount[player] < 1)
       54:  210:    return -1;
       47:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      456:  214:  while (state->deckCount[player] > 0) {
      362:  215:    card = floor(Random() * state->deckCount[player]);
      362:  216:    newDeck[newDeckPos] = state->deck[player][card];
      362:  217:    newDeckPos++;
     1063:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      701:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      362:  221:    state->deckCount[player]--;
        -:  222:  }
      409:  223:  for (i = 0; i < newDeckPos; i++) {
      362:  224:    state->deck[player][i] = newDeck[i];
      362:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       47:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       63:  346:int whoseTurn(struct gameState *state) {
       63:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      363:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      363:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      108:  533:    for (i = 0; i < state->discardCount[player];i++){
       72:  534:      state->deck[player][i] = state->discard[player][i];
       72:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       36:  538:    state->deckCount[player] = state->discardCount[player];
       36:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       36:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       36:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       36:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       36:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       36:  559:    if (deckCounter == 0)
       18:  560:      return -1;
        -:  561:
       18:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       18:  563:    state->deckCount[player]--;
       18:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      327:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      327:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      327:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      327:  576:    state->deckCount[player]--;
      327:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      345:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://refactored code
       63:  647:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int z) {
        -:  648:	int cardDrawn;
      444:  649:	while (drawntreasure<2) {
      318:  650:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
       36:  651:			shuffle(currentPlayer, state);
        -:  652:		}
      318:  653:		drawCard(currentPlayer, state);
      318:  654:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      318:  655:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      126:  656:			drawntreasure++;
        -:  657:		else {
      192:  658:			temphand[z] = cardDrawn;
      192:  659:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      192:  660:			z++;
        -:  661:		}
        -:  662:	}
      282:  663:	while (z - 1 > 0) {		//bug - changed comparator to > from >=
      156:  664:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      156:  665:		z = z - 1;
        -:  666:	}
       63:  667:	return 0;
        -:  668:}
        -:  669:
    #####:  670:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  671:	int i;
        -:  672:	//+4 Cards
    #####:  673:	for (i = 0; i < 4; i++)
        -:  674:	{
    #####:  675:		drawCard(currentPlayer, state);
        -:  676:	}
        -:  677:
        -:  678:	//+1 Buy
    #####:  679:	state->numBuys++;
        -:  680:
        -:  681:	//Each other player draws a card
    #####:  682:	for (i = 0; i < state->numPlayers; i++)
        -:  683:	{
    #####:  684:		drawCard(i, state);		//bug - removed if statement preventing current player from drawing card
        -:  685:	}
        -:  686:
        -:  687:	//put played card in played card pile
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
        -:  689:
    #####:  690:	return 0;
        -:  691:}
        -:  692:
    #####:  693:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  694:	int i;
        -:  695:	//+3 cards
    #####:  696:	for (i = 1; i < 3; i++)		//bug - changed i to start at 1 instead of 0
        -:  697:	{
    #####:  698:		drawCard(currentPlayer, state);
        -:  699:	}
        -:  700:
        -:  701:	//discard card from hand
    #####:  702:	discardCard(handPos, currentPlayer, state, 0);
    #####:  703:	return 0;
        -:  704:}
        -:  705:
    #####:  706:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  707:	//+1 Card
    #####:  708:	drawCard(currentPlayer, state);
        -:  709:
        -:  710:	//+2 Actions
    #####:  711:	state->numActions = state->numActions + 2;
        -:  712:
        -:  713:	//discard played card from hand
    #####:  714:	discardCard(handPos, currentPlayer, state, 0);
    #####:  715:	return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int minionEffect(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2) {
        -:  720:	int i;
        -:  721:	int j;
        -:  722:	//+1 action
    #####:  723:	state->numActions++;
        -:  724:
        -:  725:	//discard card from hand
    #####:  726:	discardCard(handPos, currentPlayer, state, 0);
        -:  727:
    #####:  728:	if (choice1)		//+2 coins
        -:  729:	{
    #####:  730:		state->coins = state->coins + 2;
        -:  731:	}
        -:  732:
    #####:  733:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  734:	{
        -:  735:		//discard hand
    #####:  736:		while (numHandCards(state) > 0)
        -:  737:		{
    #####:  738:			discardCard(handPos, currentPlayer, state, 0);
        -:  739:		}
        -:  740:
        -:  741:		//draw 4
    #####:  742:		for (i = 0; i < 4; i++)
        -:  743:		{
    #####:  744:			drawCard(currentPlayer, state);
        -:  745:		}
        -:  746:
        -:  747:		//other players discard hand and redraw if hand size > 4
    #####:  748:		for (i = 0; i < state->numPlayers; i++)
        -:  749:		{
    #####:  750:			if (i != currentPlayer)
        -:  751:			{
    #####:  752:				if (state->handCount[i] > 5)	//bug - changed number to 5 from 4
        -:  753:				{
        -:  754:					//discard hand
    #####:  755:					while (state->handCount[i] > 0)
        -:  756:					{
    #####:  757:						discardCard(handPos, i, state, 0);
        -:  758:					}
        -:  759:
        -:  760:					//draw 4
    #####:  761:					for (j = 0; j < 4; j++)
        -:  762:					{
    #####:  763:						drawCard(i, state);
        -:  764:					}
        -:  765:				}
        -:  766:			}
        -:  767:		}
        -:  768:
        -:  769:	}
    #####:  770:	return 0;
        -:  771:}
        -:  772:
       63:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:  int i;
        -:  776:  int j;
        -:  777:  int k;
        -:  778:  int x;
        -:  779:  int index;
       63:  780:  int currentPlayer = whoseTurn(state);
       63:  781:  int nextPlayer = currentPlayer + 1;
        -:  782:
       63:  783:  int tributeRevealedCards[2] = {-1, -1};
        -:  784:  int temphand[MAX_HAND];// moved above the if statement
       63:  785:  int drawntreasure=0;
        -:  786:  int cardDrawn;
       63:  787:  int z = 0;// this is the counter for the temp hand
       63:  788:  if (nextPlayer > (state->numPlayers - 1)){
       21:  789:    nextPlayer = 0;
        -:  790:  }
        -:  791:  
        -:  792:	
        -:  793:  //uses switch to select card and perform actions
       63:  794:  switch( card ) 
        -:  795:    {
        -:  796:    case adventurer:
       63:  797:		return adventurerEffect(drawntreasure, state, currentPlayer, temphand, z);
        -:  798:		/*
        -:  799:      while(drawntreasure<2){
        -:  800:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  801:	  shuffle(currentPlayer, state);
        -:  802:	}
        -:  803:	drawCard(currentPlayer, state);
        -:  804:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  805:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  806:	  drawntreasure++;
        -:  807:	else{
        -:  808:	  temphand[z]=cardDrawn;
        -:  809:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  810:	  z++;
        -:  811:	}
        -:  812:      }
        -:  813:      while(z-1>=0){
        -:  814:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  815:	z=z-1;
        -:  816:      }
        -:  817:      return 0;
        -:  818:		*/
        -:  819:    case council_room:
    #####:  820:		return councilRoomEffect(currentPlayer, state, handPos);
        -:  821:	/*
        -:  822:      //+4 Cards
        -:  823:      for (i = 0; i < 4; i++)
        -:  824:	{
        -:  825:	  drawCard(currentPlayer, state);
        -:  826:	}
        -:  827:			
        -:  828:      //+1 Buy
        -:  829:      state->numBuys++;
        -:  830:			
        -:  831:      //Each other player draws a card
        -:  832:      for (i = 0; i < state->numPlayers; i++)
        -:  833:	{
        -:  834:	  if ( i != currentPlayer )
        -:  835:	    {
        -:  836:	      drawCard(i, state);
        -:  837:	    }
        -:  838:	}
        -:  839:			
        -:  840:      //put played card in played card pile
        -:  841:      discardCard(handPos, currentPlayer, state, 0);
        -:  842:			
        -:  843:      return 0;
        -:  844:	*/		
        -:  845:    case feast:
        -:  846:      //gain card with cost up to 5
        -:  847:      //Backup hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  849:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  850:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  851:      }
        -:  852:      //Backup hand
        -:  853:
        -:  854:      //Update Coins for Buy
    #####:  855:      updateCoins(currentPlayer, state, 5);
    #####:  856:      x = 1;//Condition to loop on
    #####:  857:      while( x == 1) {//Buy one card
    #####:  858:	if (supplyCount(choice1, state) <= 0){
        -:  859:	  if (DEBUG)
        -:  860:	    printf("None of that card left, sorry!\n");
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  864:	  }
        -:  865:	}
    #####:  866:	else if (state->coins < getCost(choice1)){
    #####:  867:	  printf("That card is too expensive!\n");
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  871:	  }
        -:  872:	}
        -:  873:	else{
        -:  874:
        -:  875:	  if (DEBUG){
        -:  876:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:	  }
        -:  878:
    #####:  879:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  880:	  x = 0;//No more buying cards
        -:  881:
        -:  882:	  if (DEBUG){
        -:  883:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  884:	  }
        -:  885:
        -:  886:	}
        -:  887:      }     
        -:  888:
        -:  889:      //Reset Hand
    #####:  890:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  891:	state->hand[currentPlayer][i] = temphand[i];
    #####:  892:	temphand[i] = -1;
        -:  893:      }
        -:  894:      //Reset Hand
        -:  895:      			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case gardens:
    #####:  899:      return -1;
        -:  900:			
        -:  901:    case mine:
    #####:  902:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903:
    #####:  904:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  905:	{
    #####:  906:	  return -1;
        -:  907:	}
        -:  908:		
    #####:  909:      if (choice2 > treasure_map || choice2 < curse)
        -:  910:	{
    #####:  911:	  return -1;
        -:  912:	}
        -:  913:
    #####:  914:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:
    #####:  919:      gainCard(choice2, state, 2, currentPlayer);
        -:  920:
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
        -:  924:      //discard trashed card
    #####:  925:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  926:	{
    #####:  927:	  if (state->hand[currentPlayer][i] == j)
        -:  928:	    {
    #####:  929:	      discardCard(i, currentPlayer, state, 0);			
    #####:  930:	      break;
        -:  931:	    }
        -:  932:	}
        -:  933:			
    #####:  934:      return 0;
        -:  935:			
        -:  936:    case remodel:
    #####:  937:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  938:
    #####:  939:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  940:	{
    #####:  941:	  return -1;
        -:  942:	}
        -:  943:
    #####:  944:      gainCard(choice2, state, 0, currentPlayer);
        -:  945:
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
        -:  948:
        -:  949:      //discard trashed card
    #####:  950:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  951:	{
    #####:  952:	  if (state->hand[currentPlayer][i] == j)
        -:  953:	    {
    #####:  954:	      discardCard(i, currentPlayer, state, 0);			
    #####:  955:	      break;
        -:  956:	    }
        -:  957:	}
        -:  958:
        -:  959:
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case smithy:
        -:  963:      //+3 Cards
    #####:  964:		return smithyEffect(currentPlayer, state, handPos);
        -:  965:	/*
        -:  966:      for (i = 0; i < 3; i++)
        -:  967:	{
        -:  968:	  drawCard(currentPlayer, state);
        -:  969:	}
        -:  970:			
        -:  971:      //discard card from hand
        -:  972:      discardCard(handPos, currentPlayer, state, 0);
        -:  973:      return 0;
        -:  974:	*/	
        -:  975:    case village:
    #####:  976:		return villageEffect(currentPlayer, state, handPos);
        -:  977:	  /*
        -:  978:      //+1 Card
        -:  979:      drawCard(currentPlayer, state);
        -:  980:			
        -:  981:      //+2 Actions
        -:  982:      state->numActions = state->numActions + 2;
        -:  983:			
        -:  984:      //discard played card from hand
        -:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:      return 0;
        -:  987:	  */
        -:  988:    case baron:
    #####:  989:      state->numBuys++;//Increase buys by 1!
    #####:  990:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  991:	int p = 0;//Iterator for hand!
    #####:  992:	int card_not_discarded = 1;//Flag for discard set!
    #####:  993:	while(card_not_discarded){
    #####:  994:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  995:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  996:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  997:	    state->discardCount[currentPlayer]++;
    #####:  998:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  999:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1000:	    }
    #####: 1001:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1002:	    state->handCount[currentPlayer]--;
    #####: 1003:	    card_not_discarded = 0;//Exit the loop
        -: 1004:	  }
    #####: 1005:	  else if (p > state->handCount[currentPlayer]){
        -: 1006:	    if(DEBUG) {
        -: 1007:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1008:	      printf("Must gain an estate if there are any\n");
        -: 1009:	    }
    #####: 1010:	    if (supplyCount(estate, state) > 0){
    #####: 1011:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1012:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1013:	      if (supplyCount(estate, state) == 0){
    #####: 1014:		isGameOver(state);
        -: 1015:	      }
        -: 1016:	    }
    #####: 1017:	    card_not_discarded = 0;//Exit the loop
        -: 1018:	  }
        -: 1019:			    
        -: 1020:	  else{
    #####: 1021:	    p++;//Next card
        -: 1022:	  }
        -: 1023:	}
        -: 1024:      }
        -: 1025:			    
        -: 1026:      else{
    #####: 1027:	if (supplyCount(estate, state) > 0){
    #####: 1028:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1029:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1030:	  if (supplyCount(estate, state) == 0){
    #####: 1031:	    isGameOver(state);
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      
    #####: 1037:      return 0;
        -: 1038:		
        -: 1039:    case great_hall:
        -: 1040:      //+1 Card
    #####: 1041:      drawCard(currentPlayer, state);
        -: 1042:			
        -: 1043:      //+1 Actions
    #####: 1044:      state->numActions++;
        -: 1045:			
        -: 1046:      //discard card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1048:      return 0;
        -: 1049:		
        -: 1050:    case minion:
    #####: 1051:		return minionEffect(currentPlayer, state, handPos, choice1, choice2);
        -: 1052:	/*
        -: 1053:      //+1 action
        -: 1054:      state->numActions++;
        -: 1055:			
        -: 1056:      //discard card from hand
        -: 1057:      discardCard(handPos, currentPlayer, state, 0);
        -: 1058:			
        -: 1059:      if (choice1)		//+2 coins
        -: 1060:	{
        -: 1061:	  state->coins = state->coins + 2;
        -: 1062:	}
        -: 1063:			
        -: 1064:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1065:	{
        -: 1066:	  //discard hand
        -: 1067:	  while(numHandCards(state) > 0)
        -: 1068:	    {
        -: 1069:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //draw 4
        -: 1073:	  for (i = 0; i < 4; i++)
        -: 1074:	    {
        -: 1075:	      drawCard(currentPlayer, state);
        -: 1076:	    }
        -: 1077:				
        -: 1078:	  //other players discard hand and redraw if hand size > 4
        -: 1079:	  for (i = 0; i < state->numPlayers; i++)
        -: 1080:	    {
        -: 1081:	      if (i != currentPlayer)
        -: 1082:		{
        -: 1083:		  if ( state->handCount[i] > 4 )
        -: 1084:		    {
        -: 1085:		      //discard hand
        -: 1086:		      while( state->handCount[i] > 0 )
        -: 1087:			{
        -: 1088:			  discardCard(handPos, i, state, 0);
        -: 1089:			}
        -: 1090:							
        -: 1091:		      //draw 4
        -: 1092:		      for (j = 0; j < 4; j++)
        -: 1093:			{
        -: 1094:			  drawCard(i, state);
        -: 1095:			}
        -: 1096:		    }
        -: 1097:		}
        -: 1098:	    }
        -: 1099:				
        -: 1100:	}
        -: 1101:      return 0;
        -: 1102:	*/
        -: 1103:    case steward:
    #####: 1104:      if (choice1 == 1)
        -: 1105:	{
        -: 1106:	  //+2 cards
    #####: 1107:	  drawCard(currentPlayer, state);
    #####: 1108:	  drawCard(currentPlayer, state);
        -: 1109:	}
    #####: 1110:      else if (choice1 == 2)
        -: 1111:	{
        -: 1112:	  //+2 coins
    #####: 1113:	  state->coins = state->coins + 2;
        -: 1114:	}
        -: 1115:      else
        -: 1116:	{
        -: 1117:	  //trash 2 cards in hand
    #####: 1118:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1119:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1120:	}
        -: 1121:			
        -: 1122:      //discard card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case tribute:
    #####: 1127:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1128:	if (state->deckCount[nextPlayer] > 0){
    #####: 1129:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1130:	  state->deckCount[nextPlayer]--;
        -: 1131:	}
    #####: 1132:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1133:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1134:	  state->discardCount[nextPlayer]--;
        -: 1135:	}
        -: 1136:	else{
        -: 1137:	  //No Card to Reveal
        -: 1138:	  if (DEBUG){
        -: 1139:	    printf("No cards to reveal\n");
        -: 1140:	  }
        -: 1141:	}
        -: 1142:      }
        -: 1143:	    
        -: 1144:      else{
    #####: 1145:	if (state->deckCount[nextPlayer] == 0){
    #####: 1146:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1147:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1148:	    state->deckCount[nextPlayer]++;
    #####: 1149:	    state->discard[nextPlayer][i] = -1;
    #####: 1150:	    state->discardCount[nextPlayer]--;
        -: 1151:	  }
        -: 1152:			    
    #####: 1153:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1154:	} 
    #####: 1155:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1156:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1157:	state->deckCount[nextPlayer]--;
    #####: 1158:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1159:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1160:	state->deckCount[nextPlayer]--;
        -: 1161:      }    
        -: 1162:		       
    #####: 1163:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1164:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1165:	state->playedCardCount++;
    #####: 1166:	tributeRevealedCards[1] = -1;
        -: 1167:      }
        -: 1168:
    #####: 1169:      for (i = 0; i <= 2; i ++){
    #####: 1170:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1171:	  state->coins += 2;
        -: 1172:	}
        -: 1173:		    
    #####: 1174:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1175:	  drawCard(currentPlayer, state);
    #####: 1176:	  drawCard(currentPlayer, state);
        -: 1177:	}
        -: 1178:	else{//Action Card
    #####: 1179:	  state->numActions = state->numActions + 2;
        -: 1180:	}
        -: 1181:      }
        -: 1182:	    
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case ambassador:
    #####: 1186:      j = 0;		//used to check if player has enough cards to discard
        -: 1187:
    #####: 1188:      if (choice2 > 2 || choice2 < 0)
        -: 1189:	{
    #####: 1190:	  return -1;				
        -: 1191:	}
        -: 1192:
    #####: 1193:      if (choice1 == handPos)
        -: 1194:	{
    #####: 1195:	  return -1;
        -: 1196:	}
        -: 1197:
    #####: 1198:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1199:	{
    #####: 1200:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1201:	    {
    #####: 1202:	      j++;
        -: 1203:	    }
        -: 1204:	}
    #####: 1205:      if (j < choice2)
        -: 1206:	{
    #####: 1207:	  return -1;				
        -: 1208:	}
        -: 1209:
        -: 1210:      if (DEBUG) 
        -: 1211:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1212:
        -: 1213:      //increase supply count for choosen card by amount being discarded
    #####: 1214:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1215:			
        -: 1216:      //each other player gains a copy of revealed card
    #####: 1217:      for (i = 0; i < state->numPlayers; i++)
        -: 1218:	{
    #####: 1219:	  if (i != currentPlayer)
        -: 1220:	    {
    #####: 1221:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1222:	    }
        -: 1223:	}
        -: 1224:
        -: 1225:      //discard played card from hand
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1227:
        -: 1228:      //trash copies of cards returned to supply
    #####: 1229:      for (j = 0; j < choice2; j++)
        -: 1230:	{
    #####: 1231:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1232:	    {
    #####: 1233:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1234:		{
    #####: 1235:		  discardCard(i, currentPlayer, state, 1);
    #####: 1236:		  break;
        -: 1237:		}
        -: 1238:	    }
        -: 1239:	}			
        -: 1240:
    #####: 1241:      return 0;
        -: 1242:		
        -: 1243:    case cutpurse:
        -: 1244:
    #####: 1245:      updateCoins(currentPlayer, state, 2);
    #####: 1246:      for (i = 0; i < state->numPlayers; i++)
        -: 1247:	{
    #####: 1248:	  if (i != currentPlayer)
        -: 1249:	    {
    #####: 1250:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1251:		{
    #####: 1252:		  if (state->hand[i][j] == copper)
        -: 1253:		    {
    #####: 1254:		      discardCard(j, i, state, 0);
    #####: 1255:		      break;
        -: 1256:		    }
    #####: 1257:		  if (j == state->handCount[i])
        -: 1258:		    {
    #####: 1259:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1260:			{
        -: 1261:			  if (DEBUG)
        -: 1262:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1263:			}	
    #####: 1264:		      break;
        -: 1265:		    }		
        -: 1266:		}
        -: 1267:					
        -: 1268:	    }
        -: 1269:				
        -: 1270:	}				
        -: 1271:
        -: 1272:      //discard played card from hand
    #####: 1273:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1274:
    #####: 1275:      return 0;
        -: 1276:
        -: 1277:		
        -: 1278:    case embargo: 
        -: 1279:      //+2 Coins
    #####: 1280:      state->coins = state->coins + 2;
        -: 1281:			
        -: 1282:      //see if selected pile is in play
    #####: 1283:      if ( state->supplyCount[choice1] == -1 )
        -: 1284:	{
    #####: 1285:	  return -1;
        -: 1286:	}
        -: 1287:			
        -: 1288:      //add embargo token to selected supply pile
    #####: 1289:      state->embargoTokens[choice1]++;
        -: 1290:			
        -: 1291:      //trash card
    #####: 1292:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1293:      return 0;
        -: 1294:		
        -: 1295:    case outpost:
        -: 1296:      //set outpost flag
    #####: 1297:      state->outpostPlayed++;
        -: 1298:			
        -: 1299:      //discard card
    #####: 1300:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1301:      return 0;
        -: 1302:		
        -: 1303:    case salvager:
        -: 1304:      //+1 buy
    #####: 1305:      state->numBuys++;
        -: 1306:			
    #####: 1307:      if (choice1)
        -: 1308:	{
        -: 1309:	  //gain coins equal to trashed card
    #####: 1310:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1311:	  //trash card
    #####: 1312:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1313:	}
        -: 1314:			
        -: 1315:      //discard card
    #####: 1316:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1317:      return 0;
        -: 1318:		
        -: 1319:    case sea_hag:
    #####: 1320:      for (i = 0; i < state->numPlayers; i++){
    #####: 1321:	if (i != currentPlayer){
    #####: 1322:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1323:	  state->discardCount[i]++;
    #####: 1324:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1325:	}
        -: 1326:      }
    #####: 1327:      return 0;
        -: 1328:		
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
    #####: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
    #####: 1367:  if (trashFlag < 1)
        -: 1368:    {
        -: 1369:      //add card to played pile
    #####: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
    #####: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
    #####: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
    #####: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
    #####: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
    #####: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
    #####: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
    #####: 1398:  return 0;
        -: 1399:}
        -: 1400:
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
      135: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
      135: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
      918: 1446:  for (i = 0; i < state->handCount[player]; i++)
        -: 1447:    {
      783: 1448:      if (state->hand[player][i] == copper)
        -: 1449:	{
      198: 1450:	  state->coins += 1;
        -: 1451:	}
      585: 1452:      else if (state->hand[player][i] == silver)
        -: 1453:	{
       36: 1454:	  state->coins += 2;
        -: 1455:	}
      549: 1456:      else if (state->hand[player][i] == gold)
        -: 1457:	{
       27: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
      135: 1463:  state->coins += bonus;
        -: 1464:
      135: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
